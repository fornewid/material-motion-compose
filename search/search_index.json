{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"core/","text":"Material Motion Core \u00b6 Material Motion Core is a Jetpack Compose library for implementing motion system in Material Components for Android. Usage \u00b6 This library provides support for motion patterns defined in the Material spec. Shared axis \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialSharedAxisX( targetState = screen, forward = true, slideDistance = 30.dp // (optional) ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = { materialSharedAxisX(slideDistance = 30.dp) }, pop = forward.not() ) { newScreen -> // composable according to screen } Axis X Axis Y Axis Z Fade through \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = { materialFadeThrough() } ) { newScreen -> // composable according to screen } Fade Through Fade \u00b6 val (visible, onVisibleChanged) = remember { mutableStateOf(...) } MaterialFade( visible = visible ) { // composable to show } Fade Elevation scale \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { materialElevationScaleIn() with ... } // or motionSpec = { ... with materialElevationScaleOut() } ) { newScreen -> // composable according to screen } ElevationScale Hold \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { holdIn() with ... } // or motionSpec = { ... with holdOut() } ) { newScreen -> // composable according to screen } Hold If you want to use different motions depending on the state: \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { when (targetState) { ... -> materialSharedAxisY() ... -> materialFadeThroughIn() with materialFadeThroughOut() ... } }, pop = false // whether motion contents are rendered in reverse order. ) { newScreen -> // composable according to screen } Demo If you want to change motion durations: \u00b6 Just pass a duration(=ms) directly when creating material motion. For example: val motionSpec = materialFadeThrough(durationMillis = 300) Download \u00b6 repositories { mavenCentral() } dependencies { implementation \"io.github.fornewid:material-motion-compose-core:<version>\" }","title":"Guide"},{"location":"core/#material-motion-core","text":"Material Motion Core is a Jetpack Compose library for implementing motion system in Material Components for Android.","title":"Material Motion Core"},{"location":"core/#usage","text":"This library provides support for motion patterns defined in the Material spec.","title":"Usage"},{"location":"core/#shared-axis","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialSharedAxisX( targetState = screen, forward = true, slideDistance = 30.dp // (optional) ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = { materialSharedAxisX(slideDistance = 30.dp) }, pop = forward.not() ) { newScreen -> // composable according to screen } Axis X Axis Y Axis Z","title":"Shared axis"},{"location":"core/#fade-through","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = { materialFadeThrough() } ) { newScreen -> // composable according to screen } Fade Through","title":"Fade through"},{"location":"core/#fade","text":"val (visible, onVisibleChanged) = remember { mutableStateOf(...) } MaterialFade( visible = visible ) { // composable to show } Fade","title":"Fade"},{"location":"core/#elevation-scale","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { materialElevationScaleIn() with ... } // or motionSpec = { ... with materialElevationScaleOut() } ) { newScreen -> // composable according to screen } ElevationScale","title":"Elevation scale"},{"location":"core/#hold","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { holdIn() with ... } // or motionSpec = { ... with holdOut() } ) { newScreen -> // composable according to screen } Hold","title":"Hold"},{"location":"core/#if-you-want-to-use-different-motions-depending-on-the-state","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { when (targetState) { ... -> materialSharedAxisY() ... -> materialFadeThroughIn() with materialFadeThroughOut() ... } }, pop = false // whether motion contents are rendered in reverse order. ) { newScreen -> // composable according to screen } Demo","title":"If you want to use different motions depending on the state:"},{"location":"core/#if-you-want-to-change-motion-durations","text":"Just pass a duration(=ms) directly when creating material motion. For example: val motionSpec = materialFadeThrough(durationMillis = 300)","title":"If you want to change motion durations:"},{"location":"core/#download","text":"repositories { mavenCentral() } dependencies { implementation \"io.github.fornewid:material-motion-compose-core:<version>\" }","title":"Download"},{"location":"migrating-from-0.5-to-0.6/","text":"Migrating from 0.5.x to 0.6.x \u00b6 In 0.6.0 , MaterialMotion has been completely rewritten based on AnimatedContent . So, if you were already using this library, you should migrate your codes. Please check the before and after in the following codes. Shared axis \u00b6 In 0.6.1 , both Axis and MaterialSharedAxis composable were deprecated. Use MaterialSharedAxis* composables or materialSharedAxis* motion specs for each axis instead. MaterialSharedAxis* composables: Axis Composable X MaterialSharedAxisX() Y MaterialSharedAxisY() Z MaterialSharedAxisZ() materialSharedAxis* motion specs: Axis MotionSpec EnterMotionSpec ExitMotionSpec X materialSharedAxisX() materialSharedAxisXIn() materialSharedAxisXOut() Y materialSharedAxisY() materialSharedAxisYIn() materialSharedAxisYOut() Z materialSharedAxisZ() materialSharedAxisZIn() materialSharedAxisZOut() You need to set the slide distance on the X/Y axis. If wants, you can set the slide distance as Dp value using rememberSlideDistance() . val motionSpec: MotionSpec = materialSharedAxisX( forward = true or false, slideDistance = rememberSlideDistance(30.dp) ) In 0.5.x : MaterialSharedAxis( targetState = screen, axis = Axis.X, forward = true, slideDistance = 30.dp // (optional) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialSharedAxisX( targetState = screen, forward = true, slideDistance = rememberSlideDistance(30.dp) ) { newScreen -> // composable according to screen } With MaterialMotion \u00b6 In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialSharedAxis( axis = Axis.X, forward = true, slideDistance = 30.dp // (optional) ) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialSharedAxisX( forward = true, slideDistance = rememberSlideDistance(30.dp) ) ) { newScreen -> // composable according to screen } Fade through \u00b6 Usage has not changed between 0.5.x and 0.6.x . MotionSpec EnterMotionSpec ExitMotionSpec materialFadeThrough() materialFadeThroughIn() materialFadeThroughOut() In 0.5.x : MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } In 0.6.x : MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } With MaterialMotion \u00b6 In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialFadeThrough() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialFadeThrough() ) { newScreen -> // composable according to screen } Fade \u00b6 Unlike 0.5.x , 0.6.x does NOT support MotionSpec . Use MaterialFade composable instead. In 0.5.x : MaterialFade( targetState = visible ) { visible -> if (visible) { // composable } } In 0.6.x : MaterialFade( visible = visible ) { // composable } Elevation scale \u00b6 MotionSpec EnterMotionSpec ExitMotionSpec - materialElevationScaleIn() materialElevationScaleOut() In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScale(growing = false) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScaleIn() with materialElevationScaleOut() ) { newScreen -> // composable according to screen } With other MaterialMotion \u00b6 In 0.5.x : MaterialMotion( targetState = screen, enterMotionSpec = materialElevationScale(growing = false) exitMotionSpec = ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, enterMotionSpec = ... exitMotionSpec = materialElevationScale(growing = true) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScaleIn() with ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = ... with materialElevationScaleOut() ) { newScreen -> // composable according to screen } Hold \u00b6 MotionSpec EnterMotionSpec ExitMotionSpec - holdIn() holdOut() In 0.5.x : MaterialMotion( targetState = screen, motionSpec = hold() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = holdIn() with holdOut() ) { newScreen -> // composable according to screen } With other MaterialMotion \u00b6 In 0.5.x : MaterialMotion( targetState = screen, enterMotionSpec = hold() exitMotionSpec = ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, enterMotionSpec = ... exitMotionSpec = hold() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = holdIn() with ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = ... with holdOut() ) { newScreen -> // composable according to screen }","title":"Migrating from `0.5.x` to `0.6.x`"},{"location":"migrating-from-0.5-to-0.6/#migrating-from-05x-to-06x","text":"In 0.6.0 , MaterialMotion has been completely rewritten based on AnimatedContent . So, if you were already using this library, you should migrate your codes. Please check the before and after in the following codes.","title":"Migrating from 0.5.x to 0.6.x"},{"location":"migrating-from-0.5-to-0.6/#shared-axis","text":"In 0.6.1 , both Axis and MaterialSharedAxis composable were deprecated. Use MaterialSharedAxis* composables or materialSharedAxis* motion specs for each axis instead. MaterialSharedAxis* composables: Axis Composable X MaterialSharedAxisX() Y MaterialSharedAxisY() Z MaterialSharedAxisZ() materialSharedAxis* motion specs: Axis MotionSpec EnterMotionSpec ExitMotionSpec X materialSharedAxisX() materialSharedAxisXIn() materialSharedAxisXOut() Y materialSharedAxisY() materialSharedAxisYIn() materialSharedAxisYOut() Z materialSharedAxisZ() materialSharedAxisZIn() materialSharedAxisZOut() You need to set the slide distance on the X/Y axis. If wants, you can set the slide distance as Dp value using rememberSlideDistance() . val motionSpec: MotionSpec = materialSharedAxisX( forward = true or false, slideDistance = rememberSlideDistance(30.dp) ) In 0.5.x : MaterialSharedAxis( targetState = screen, axis = Axis.X, forward = true, slideDistance = 30.dp // (optional) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialSharedAxisX( targetState = screen, forward = true, slideDistance = rememberSlideDistance(30.dp) ) { newScreen -> // composable according to screen }","title":"Shared axis"},{"location":"migrating-from-0.5-to-0.6/#with-materialmotion","text":"In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialSharedAxis( axis = Axis.X, forward = true, slideDistance = 30.dp // (optional) ) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialSharedAxisX( forward = true, slideDistance = rememberSlideDistance(30.dp) ) ) { newScreen -> // composable according to screen }","title":"With MaterialMotion"},{"location":"migrating-from-0.5-to-0.6/#fade-through","text":"Usage has not changed between 0.5.x and 0.6.x . MotionSpec EnterMotionSpec ExitMotionSpec materialFadeThrough() materialFadeThroughIn() materialFadeThroughOut() In 0.5.x : MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } In 0.6.x : MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen }","title":"Fade through"},{"location":"migrating-from-0.5-to-0.6/#with-materialmotion_1","text":"In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialFadeThrough() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialFadeThrough() ) { newScreen -> // composable according to screen }","title":"With MaterialMotion"},{"location":"migrating-from-0.5-to-0.6/#fade","text":"Unlike 0.5.x , 0.6.x does NOT support MotionSpec . Use MaterialFade composable instead. In 0.5.x : MaterialFade( targetState = visible ) { visible -> if (visible) { // composable } } In 0.6.x : MaterialFade( visible = visible ) { // composable }","title":"Fade"},{"location":"migrating-from-0.5-to-0.6/#elevation-scale","text":"MotionSpec EnterMotionSpec ExitMotionSpec - materialElevationScaleIn() materialElevationScaleOut() In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScale(growing = false) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScaleIn() with materialElevationScaleOut() ) { newScreen -> // composable according to screen }","title":"Elevation scale"},{"location":"migrating-from-0.5-to-0.6/#with-other-materialmotion","text":"In 0.5.x : MaterialMotion( targetState = screen, enterMotionSpec = materialElevationScale(growing = false) exitMotionSpec = ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, enterMotionSpec = ... exitMotionSpec = materialElevationScale(growing = true) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScaleIn() with ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = ... with materialElevationScaleOut() ) { newScreen -> // composable according to screen }","title":"With other MaterialMotion"},{"location":"migrating-from-0.5-to-0.6/#hold","text":"MotionSpec EnterMotionSpec ExitMotionSpec - holdIn() holdOut() In 0.5.x : MaterialMotion( targetState = screen, motionSpec = hold() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = holdIn() with holdOut() ) { newScreen -> // composable according to screen }","title":"Hold"},{"location":"migrating-from-0.5-to-0.6/#with-other-materialmotion_1","text":"In 0.5.x : MaterialMotion( targetState = screen, enterMotionSpec = hold() exitMotionSpec = ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, enterMotionSpec = ... exitMotionSpec = hold() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = holdIn() with ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = ... with holdOut() ) { newScreen -> // composable according to screen }","title":"With other MaterialMotion"},{"location":"navigation/","text":"Material Motion Navigation \u00b6 Usage \u00b6 val navController = rememberMaterialMotionNavController () MaterialMotionNavHost ( navController , startDestination = \"first\" ) { composable ( \"first\" , enterMotionSpec = { holdIn () }, exitMotionSpec = { holdOut () }, ) { // first composable } composable ( \"second\" , enterMotionSpec = { materialSharedAxisXIn () }, exitMotionSpec = { materialSharedAxisXOut () }, ) { // second composable } } Download \u00b6 repositories { mavenCentral() } dependencies { implementation \"io.github.fornewid:material-motion-compose-navigation:<version>\" // If you want to change motion, use with core library. implementation \"io.github.fornewid:material-motion-compose-core:<version>\" }","title":"Guide"},{"location":"navigation/#material-motion-navigation","text":"","title":"Material Motion Navigation"},{"location":"navigation/#usage","text":"val navController = rememberMaterialMotionNavController () MaterialMotionNavHost ( navController , startDestination = \"first\" ) { composable ( \"first\" , enterMotionSpec = { holdIn () }, exitMotionSpec = { holdOut () }, ) { // first composable } composable ( \"second\" , enterMotionSpec = { materialSharedAxisXIn () }, exitMotionSpec = { materialSharedAxisXOut () }, ) { // second composable } }","title":"Usage"},{"location":"navigation/#download","text":"repositories { mavenCentral() } dependencies { implementation \"io.github.fornewid:material-motion-compose-navigation:<version>\" // If you want to change motion, use with core library. implementation \"io.github.fornewid:material-motion-compose-core:<version>\" }","title":"Download"}]}