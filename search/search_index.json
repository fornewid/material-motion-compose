{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#material-motion-for-jetpack-compose","title":"Material Motion for Jetpack Compose","text":"<p>Jetpack Compose library for implementing motion system in Material Components for Android.</p>"},{"location":"#compose-versions","title":"Compose versions","text":"Compose 1.0 (1.0.x) Compose 1.1 (1.1.x) Compose 1.2 (1.2.x) Compose 1.3 (1.3.x) Compose 1.4 (1.4.x) Compose 1.5 (1.5.x)"},{"location":"#core","title":"\ud83c\udf08 Core","text":"<p>A library which provides motion patterns support for Jetpack Compose.</p>"},{"location":"#navigation","title":"\ud83e\udded Navigation","text":"<p>A library which provides motion patterns support for Jetpack Navigation Compose.</p>"},{"location":"#license","title":"License","text":"<p>Licensed under the Apache 2.0 license. See LICENSE for details.</p>"},{"location":"core/","title":"Material Motion Core","text":"<p>Material Motion Core is a Jetpack Compose library for implementing motion system in Material Components for Android.</p>"},{"location":"core/#usage","title":"Usage","text":"<p>This library provides support for motion patterns defined in the Material spec.</p>"},{"location":"core/#shared-axis","title":"Shared axis","text":"<pre><code>val (screen, onScreenChanged) = remember { mutableStateOf(...) }\nMaterialSharedAxisX(\n    targetState = screen,\n    forward = true,\n    slideDistance = 30.dp // (optional)\n) { newScreen -&gt;\n    // composable according to screen\n}\n\n// or\n\nval slideDistance = rememberSlideDistance(slideDistance = 30.dp)\nMaterialMotion(\n    targetState = screen,\n    motionSpec = {\n        materialSharedAxisX(forward = forward, slideDistance = slideDistance)\n    },\n    pop = forward.not()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre> Axis X Axis Y Axis Z"},{"location":"core/#fade-through","title":"Fade through","text":"<pre><code>val (screen, onScreenChanged) = remember { mutableStateOf(...) }\nMaterialFadeThrough(\n    targetState = screen\n) { newScreen -&gt;\n    // composable according to screen\n}\n\n// or\n\nMaterialMotion(\n    targetState = screen,\n    motionSpec = { materialFadeThrough() }\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre> Fade Through"},{"location":"core/#fade","title":"Fade","text":"<pre><code>val (visible, onVisibleChanged) = remember { mutableStateOf(...) }\nMaterialFade(\n    visible = visible\n) {\n    // composable to show\n}\n</code></pre> Fade"},{"location":"core/#elevation-scale","title":"Elevation scale","text":"<pre><code>val (screen, onScreenChanged) = remember { mutableStateOf(...) }\nMaterialMotion(\n    targetState = screen,\n    motionSpec = { materialElevationScaleIn() with ... }\n    // or\n    motionSpec = { ... with materialElevationScaleOut() }\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre> ElevationScale"},{"location":"core/#hold","title":"Hold","text":"<pre><code>val (screen, onScreenChanged) = remember { mutableStateOf(...) }\nMaterialMotion(\n    targetState = screen,\n    motionSpec = { holdIn() with ... }\n    // or\n    motionSpec = { ... with holdOut() }\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre> Hold"},{"location":"core/#circularreveal","title":"CircularReveal","text":"<pre><code>var visible: Boolean by remember { mutableStateOf(false) }\nBox(\n    modifier = Modifier.circularReveal(\n        visible = visible,\n        center = { fullSize -&gt;\n            Offset(x = 1f * fullSize.width, y = 0f * fullSize.height) // TopRight\n        },\n    )\n) { ... }\n</code></pre> CircularReveal"},{"location":"core/#if-you-want-to-use-different-motions-depending-on-the-state","title":"If you want to use different motions depending on the state:","text":"<pre><code>val (screen, onScreenChanged) = remember { mutableStateOf(...) }\nval slideDistance = rememberSlideDistance(slideDistance = 30.dp)\nMaterialMotion(\n    targetState = screen,\n    motionSpec = {\n        when (targetState) {\n           ... -&gt; materialSharedAxisY(forward = true, slideDistance = slideDistance)\n           ... -&gt; materialFadeThroughIn() with materialFadeThroughOut()\n           ...\n        }\n    },\n    pop = false // whether motion contents are rendered in reverse order.\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre> Demo"},{"location":"core/#if-you-want-to-change-motion-durations","title":"If you want to change motion durations:","text":"<p>Just pass a duration(=ms) directly when creating material motion.</p> <p>For example: <pre><code>val motionSpec = materialFadeThrough(durationMillis = 300)\n</code></pre></p>"},{"location":"core/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"io.github.fornewid:material-motion-compose-core:&lt;version&gt;\"\n}\n</code></pre>"},{"location":"migrating-from-0.5-to-0.6/","title":"Migrating from <code>0.5.x</code> to <code>0.6.x</code>","text":"<p>In <code>0.6.0</code>, <code>MaterialMotion</code> has been completely rewritten based on <code>AnimatedContent</code>.</p> <p>So, if you were already using this library, you should migrate your codes.</p> <p>Please check the before and after in the following codes.</p>"},{"location":"migrating-from-0.5-to-0.6/#shared-axis","title":"Shared axis","text":"<p>In <code>0.6.1</code>, both <code>Axis</code> and <code>MaterialSharedAxis</code> composable were deprecated.</p> <p>Use <code>MaterialSharedAxis*</code> composables or <code>materialSharedAxis*</code> motion specs for each axis instead.</p> <ul> <li><code>MaterialSharedAxis*</code> composables:</li> </ul> Axis Composable X <code>MaterialSharedAxisX()</code> Y <code>MaterialSharedAxisY()</code> Z <code>MaterialSharedAxisZ()</code> <ul> <li><code>materialSharedAxis*</code> motion specs:</li> </ul> Axis MotionSpec EnterMotionSpec ExitMotionSpec X <code>materialSharedAxisX()</code> <code>materialSharedAxisXIn()</code> <code>materialSharedAxisXOut()</code> Y <code>materialSharedAxisY()</code> <code>materialSharedAxisYIn()</code> <code>materialSharedAxisYOut()</code> Z <code>materialSharedAxisZ()</code> <code>materialSharedAxisZIn()</code> <code>materialSharedAxisZOut()</code> <p>You need to set the slide distance on the X/Y axis.</p> <p>If wants, you can set the slide distance as <code>Dp</code> value using <code>rememberSlideDistance()</code>.</p> <pre><code>val motionSpec: MotionSpec = materialSharedAxisX(\n    forward = true or false,\n    slideDistance = rememberSlideDistance(30.dp)\n)\n</code></pre> <p>In <code>0.5.x</code>: <pre><code>MaterialSharedAxis(\n    targetState = screen,\n    axis = Axis.X,\n    forward = true,\n    slideDistance = 30.dp // (optional)\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialSharedAxisX(\n    targetState = screen,\n    forward = true,\n    slideDistance = rememberSlideDistance(30.dp)\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p>"},{"location":"migrating-from-0.5-to-0.6/#with-materialmotion","title":"With <code>MaterialMotion</code>","text":"<p>In <code>0.5.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = materialSharedAxis(\n        axis = Axis.X,\n        forward = true,\n        slideDistance = 30.dp // (optional)\n    )\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = materialSharedAxisX(\n        forward = true,\n        slideDistance = rememberSlideDistance(30.dp)\n    )\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p>"},{"location":"migrating-from-0.5-to-0.6/#fade-through","title":"Fade through","text":"<p>Usage has not changed between <code>0.5.x</code> and <code>0.6.x</code>.</p> MotionSpec EnterMotionSpec ExitMotionSpec <code>materialFadeThrough()</code> <code>materialFadeThroughIn()</code> <code>materialFadeThroughOut()</code> <p>In <code>0.5.x</code>: <pre><code>MaterialFadeThrough(\n    targetState = screen\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialFadeThrough(\n    targetState = screen\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p>"},{"location":"migrating-from-0.5-to-0.6/#with-materialmotion_1","title":"With <code>MaterialMotion</code>","text":"<p>In <code>0.5.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = materialFadeThrough()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = materialFadeThrough()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p>"},{"location":"migrating-from-0.5-to-0.6/#fade","title":"Fade","text":"<p>Unlike <code>0.5.x</code>, <code>0.6.x</code> does NOT support <code>MotionSpec</code>. Use <code>MaterialFade</code> composable instead.</p> <p>In <code>0.5.x</code>: <pre><code>MaterialFade(\n    targetState = visible\n) { visible -&gt;\n    if (visible) {\n        // composable\n    }\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialFade(\n    visible = visible\n) {\n    // composable\n}\n</code></pre></p>"},{"location":"migrating-from-0.5-to-0.6/#elevation-scale","title":"Elevation scale","text":"MotionSpec EnterMotionSpec ExitMotionSpec - <code>materialElevationScaleIn()</code> <code>materialElevationScaleOut()</code> <p>In <code>0.5.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = materialElevationScale(growing = false)\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = materialElevationScaleIn() with materialElevationScaleOut()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p>"},{"location":"migrating-from-0.5-to-0.6/#with-other-materialmotion","title":"With other <code>MaterialMotion</code>","text":"<p>In <code>0.5.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    enterMotionSpec = materialElevationScale(growing = false)\n    exitMotionSpec = ...\n) { newScreen -&gt;\n    // composable according to screen\n}\n// or\nMaterialMotion(\n    targetState = screen,\n    enterMotionSpec = ...\n    exitMotionSpec = materialElevationScale(growing = true)\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = materialElevationScaleIn() with ...\n) { newScreen -&gt;\n    // composable according to screen\n}\n// or\nMaterialMotion(\n    targetState = screen,\n    motionSpec = ... with materialElevationScaleOut()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p>"},{"location":"migrating-from-0.5-to-0.6/#hold","title":"Hold","text":"MotionSpec EnterMotionSpec ExitMotionSpec - <code>holdIn()</code> <code>holdOut()</code> <p>In <code>0.5.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = hold()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = holdIn() with holdOut()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p>"},{"location":"migrating-from-0.5-to-0.6/#with-other-materialmotion_1","title":"With other <code>MaterialMotion</code>","text":"<p>In <code>0.5.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    enterMotionSpec = hold()\n    exitMotionSpec = ...\n) { newScreen -&gt;\n    // composable according to screen\n}\n// or\nMaterialMotion(\n    targetState = screen,\n    enterMotionSpec = ...\n    exitMotionSpec = hold()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p> <p>In <code>0.6.x</code>: <pre><code>MaterialMotion(\n    targetState = screen,\n    motionSpec = holdIn() with ...\n) { newScreen -&gt;\n    // composable according to screen\n}\n// or\nMaterialMotion(\n    targetState = screen,\n    motionSpec = ... with holdOut()\n) { newScreen -&gt;\n    // composable according to screen\n}\n</code></pre></p>"},{"location":"migrating-from-0.9-to-0.10/","title":"Migrating from <code>0.9.x</code> to <code>0.10.x</code>","text":"<p>In <code>0.10.0</code>, <code>MotionSpec</code> is deprecated and use <code>ContentTransform</code> instead.</p> <p>So, if you were already using this library, you should migrate your codes.</p> <p>The deprecated APIs may be removed in the next release.</p> <p>Please check differences in the following codes.</p>"},{"location":"migrating-from-0.9-to-0.10/#migrating-core-library","title":"Migrating 'core' library","text":"<p>If you are using 'core' library, migration is not difficult except for MaterialSharedAxisX/Y.</p>"},{"location":"migrating-from-0.9-to-0.10/#materialmotion","title":"MaterialMotion","text":"<p>Migration steps:</p> <ol> <li> <p>Renames <code>motionSpec</code> parameter to <code>transitionSpec</code>.</p> </li> <li> <p>Change packages from <code>soup.compose.material.motion.*</code> to<code>soup.compose.material.motion.animation.*</code>.</p> </li> <li> <p>Change import from <code>soup.compose.material.motion.with</code> to <code>androidx.compose.animation.with</code>.</p> </li> </ol> <pre><code>- import soup.compose.material.motion.*\n+ import soup.compose.material.motion.animation.*\n- import soup.compose.material.motion.with\n+ import androidx.compose.animation.with\n\n MaterialMotion(\n-     motionSpec = { ... with ... },\n+     transitionSpec = { ... with ... },\n ) { ... }\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#materialsharedaxisx","title":"MaterialSharedAxisX","text":"<p>Migration steps:</p> <ol> <li> <p>Change packages from <code>soup.compose.material.motion.*</code> to<code>soup.compose.material.motion.animation.*</code>.</p> </li> <li> <p>Add <code>forward</code> and <code>slideDistance</code> slots using <code>rememberSlideDistance()</code>.</p> </li> </ol> <pre><code>- import soup.compose.material.motion.materialSharedAxisX\n- import soup.compose.material.motion.materialSharedAxisXIn\n- import soup.compose.material.motion.materialSharedAxisXOut\n+ import soup.compose.material.motion.animation.materialSharedAxisX\n+ import soup.compose.material.motion.animation.materialSharedAxisXIn\n+ import soup.compose.material.motion.animation.materialSharedAxisXOut\n\n- materialSharedAxisX()\n+ val slideDistance = rememberSlideDistance()\n+ materialSharedAxisX(forward = forward, slideDistance = slideDistance)\n\n- materialSharedAxisXIn()\n+ val slideDistance = rememberSlideDistance()\n+ materialSharedAxisXIn(forward = forward, slideDistance = slideDistance)\n\n- materialSharedAxisXOut()\n+ val slideDistance = rememberSlideDistance()\n+ materialSharedAxisXOut(forward = forward, slideDistance = slideDistance)\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#materialsharedaxisy","title":"MaterialSharedAxisY","text":"<p>Migration steps:</p> <ol> <li> <p>Change packages from <code>soup.compose.material.motion.*</code> to<code>soup.compose.material.motion.animation.*</code>.</p> </li> <li> <p>Add <code>forward</code> and <code>slideDistance</code> slots using <code>rememberSlideDistance()</code>.</p> </li> </ol> <pre><code>- import soup.compose.material.motion.materialSharedAxisY\n- import soup.compose.material.motion.materialSharedAxisYIn\n- import soup.compose.material.motion.materialSharedAxisYOut\n+ import soup.compose.material.motion.animation.materialSharedAxisY\n+ import soup.compose.material.motion.animation.materialSharedAxisYIn\n+ import soup.compose.material.motion.animation.materialSharedAxisYOut\n\n- materialSharedAxisY()\n+ val slideDistance = rememberSlideDistance()\n+ materialSharedAxisY(forward = forward, slideDistance = slideDistance)\n\n- materialSharedAxisYIn()\n+ val slideDistance = rememberSlideDistance()\n+ materialSharedAxisYIn(forward = forward, slideDistance = slideDistance)\n\n- materialSharedAxisYOut()\n+ val slideDistance = rememberSlideDistance()\n+ materialSharedAxisYOut(forward = forward, slideDistance = slideDistance)\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#materialsharedaxisz","title":"MaterialSharedAxisZ","text":"<p>Migration steps:</p> <ol> <li> <p>Change packages from <code>soup.compose.material.motion.*</code> to<code>soup.compose.material.motion.animation.*</code>.</p> </li> <li> <p>Add <code>forward</code> slot.</p> </li> </ol> <pre><code>- import soup.compose.material.motion.materialSharedAxisZ\n- import soup.compose.material.motion.materialSharedAxisZIn\n- import soup.compose.material.motion.materialSharedAxisZOut\n+ import soup.compose.material.motion.animation.materialSharedAxisZ\n+ import soup.compose.material.motion.animation.materialSharedAxisZIn\n+ import soup.compose.material.motion.animation.materialSharedAxisZOut\n\n- materialSharedAxisZ()\n+ materialSharedAxisZ(forward = forward)\n\n- materialSharedAxisZIn()\n+ materialSharedAxisZIn(forward = forward)\n\n- materialSharedAxisZOut()\n+ materialSharedAxisZOut(forward = forward)\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#materialfadethrough","title":"MaterialFadeThrough","text":"<p>Change packages from <code>soup.compose.material.motion.*</code> to<code>soup.compose.material.motion.animation.*</code>.</p> <pre><code>- import soup.compose.material.motion.materialFadeThrough\n- import soup.compose.material.motion.materialFadeThroughIn\n- import soup.compose.material.motion.materialFadeThroughOut\n+ import soup.compose.material.motion.animation.materialFadeThrough\n+ import soup.compose.material.motion.animation.materialFadeThroughIn\n+ import soup.compose.material.motion.animation.materialFadeThroughOut\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#materialelevationscale","title":"MaterialElevationScale","text":"<p>Change packages from <code>soup.compose.material.motion.*</code> to<code>soup.compose.material.motion.animation.*</code>.</p> <pre><code>- import soup.compose.material.motion.materialElevationScaleIn\n- import soup.compose.material.motion.materialElevationScaleOut\n+ import soup.compose.material.motion.animation.materialElevationScaleIn\n+ import soup.compose.material.motion.animation.materialElevationScaleOut\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#hold","title":"Hold","text":"<p>Change packages from <code>soup.compose.material.motion.*</code> to<code>soup.compose.material.motion.animation.*</code>.</p> <pre><code>- import soup.compose.material.motion.holdIn\n- import soup.compose.material.motion.holdOut\n+ import soup.compose.material.motion.animation.holdIn\n+ import soup.compose.material.motion.animation.holdOut\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#translate","title":"Translate","text":"<p>Change packages from <code>soup.compose.material.motion.*</code> to<code>soup.compose.material.motion.animation.*</code>.</p> <pre><code>- import soup.compose.material.motion.translateXIn\n- import soup.compose.material.motion.translateXOut\n- import soup.compose.material.motion.translateYIn\n- import soup.compose.material.motion.translateYOut\n+ import soup.compose.material.motion.animation.translateXIn\n+ import soup.compose.material.motion.animation.translateXOut\n+ import soup.compose.material.motion.animation.translateYIn\n+ import soup.compose.material.motion.animation.translateYOut\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#migrating-navigation-library","title":"Migrating 'navigation' library","text":"<p>If you are using 'navigation' library, migration is simple.</p> <p>Migration steps:</p> <ol> <li> <p>Rename all <code>*MotionSpec</code> parameters to <code>*Transition</code>.</p> </li> <li> <p>Change all material motion references from <code>soup.compose.material.motion.*</code> package to <code>soup.compose.material.motion.animation.*</code> package.    For more information, see Migrating 'core' library section.</p> </li> </ol> <p>With this changes, you can easily migrate to this library from accompanist-navigation-animation.</p>"},{"location":"migrating-from-0.9-to-0.10/#materialmotionnavhost","title":"MaterialMotionNavHost","text":"<pre><code>- import soup.compose.material.motion.*\n+ import soup.compose.material.motion.animation.*\n\n MaterialMotionNavHost(\n      ...,\n-     enterMotionSpec = { ... },\n-     exitMotionSpec = { ... },\n-     popEnterMotionSpec = { ... },\n-     popExitMotionSpec = { ... }\n+     enterTransition = { ... },\n+     exitTransition = { ... },\n+     popEnterTransition = { ... },\n+     popExitTransition = { ... }\n ) { ... }\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#composable","title":"<code>composable()</code>","text":"<pre><code>- import soup.compose.material.motion.*\n+ import soup.compose.material.motion.animation.*\n\n MaterialMotionNavHost(...) {\n      composable(\n          ...,\n-         enterMotionSpec = { ... },\n-         exitMotionSpec = { ... },\n-         popEnterMotionSpec = { ... },\n-         popExitMotionSpec = { ... }\n+         enterTransition = { ... },\n+         exitTransition = { ... },\n+         popEnterTransition = { ... },\n+         popExitTransition = { ... }\n     ) { ... }\n  }\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#navigation","title":"<code>navigation()</code>","text":"<pre><code>- import soup.compose.material.motion.*\n+ import soup.compose.material.motion.animation.*\n\n MaterialMotionNavHost(...) {\n      navigation(\n          ...,\n-         enterMotionSpec = { ... },\n-         exitMotionSpec = { ... },\n-         popEnterMotionSpec = { ... },\n-         popExitMotionSpec = { ... }\n+         enterTransition = { ... },\n+         exitTransition = { ... },\n+         popEnterTransition = { ... },\n+         popExitTransition = { ... }\n     ) {\n          composable(...) { ... }\n      }\n  }\n</code></pre>"},{"location":"migrating-from-0.9-to-0.10/#if-you-are-using-default-motionspecs","title":"If you are using default motionSpecs","text":"<p>In <code>0.10.0</code>, default transitions are changed.</p> <p>Enter Transition</p> <ul> <li> <p>Before: <code>materialSharedAxisZIn()</code></p> </li> <li> <p>After: <code>fadeIn(animationSpec = tween(DefaultMotionDuration))</code></p> </li> </ul> <p>Exit Transition:</p> <ul> <li> <p>Before: <code>materialSharedAxisZOut()</code></p> </li> <li> <p>After: <code>fadeOut(animationSpec = tween(DefaultMotionDuration))</code></p> </li> </ul> <p>So if you want to keep the previous transitions, you need to define <code>*Transition</code> parameters.</p> <p>Please add <code>*Transition</code> parameters like the following codes:</p> <pre><code>  MaterialMotionNavHost(\n      ...,\n+     enterTransition = { materialSharedAxisZIn(forward = true) },\n+     exitTransition = { materialSharedAxisZOut(forward = true) },\n+     popEnterTransition = { materialSharedAxisZIn(forward = false) },\n+     popExitTransition = { materialSharedAxisZOut(forward = false) },\n ) { ... }\n</code></pre>"},{"location":"navigation/","title":"Material Motion Navigation","text":""},{"location":"navigation/#usage","title":"Usage","text":"<pre><code>val navController = rememberMaterialMotionNavController()\n\nMaterialMotionNavHost(navController, startDestination = \"first\") {\ncomposable(\"first\",\nenterMotionSpec = { holdIn() },\nexitMotionSpec = { holdOut() },\n) {\n// first composable\n}\n\ncomposable(\"second\",\nenterMotionSpec = { materialSharedAxisXIn() },\nexitMotionSpec = { materialSharedAxisXOut() },\n) {\n// second composable\n}\n}\n</code></pre>"},{"location":"navigation/#migration","title":"Migration","text":""},{"location":"navigation/#from-accompanist-navigation-animation-library","title":"From 'accompanist-navigation-animation' library","text":"<p>The migration is simple.</p> <p>Please check differences in the following codes.</p> <pre><code>- import com.google.accompanist.navigation.animation.AnimatedNavHost\n- import com.google.accompanist.navigation.animation.composable\n- import com.google.accompanist.navigation.animation.navigation\n- import com.google.accompanist.navigation.animation.rememberAnimatedNavController\n+ import soup.compose.material.motion.navigation.MaterialMotionNavHost\n+ import soup.compose.material.motion.navigation.composable\n+ import soup.compose.material.motion.navigation.navigation\n+ import soup.compose.material.motion.navigation.rememberMaterialMotionNavController\n\n- val navController = rememberAnimatedNavController()\n+ val navController = rememberMaterialMotionNavController()\n- AnimatedNavHost(\n+ MaterialMotionNavHost(\n     ...,\n  ) {\n      composable(...) { ... }\n      navigation(...) {\n          composable(...) { ... }\n      }\n  }\n</code></pre>"},{"location":"navigation/#download","title":"Download","text":"<pre><code>repositories {\n    mavenCentral()\n}\n\ndependencies {\n    implementation \"io.github.fornewid:material-motion-compose-navigation:&lt;version&gt;\"\n\n    // If you want to change motion, use with core library.\n    implementation \"io.github.fornewid:material-motion-compose-core:&lt;version&gt;\"\n}\n</code></pre>"}]}