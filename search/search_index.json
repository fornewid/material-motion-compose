{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Material Motion for Jetpack Compose \u00b6 Jetpack Compose library for implementing motion system in Material Components for Android. Compose versions \u00b6 Compose 1.0 (1.0.x) Compose 1.1 (1.1.x) Compose 1.2 (1.2.x) Compose 1.3 (1.3.x) \ud83c\udf08 Core \u00b6 A library which provides motion patterns support for Jetpack Compose. \ud83e\udded Navigation \u00b6 A library which provides motion patterns support for Jetpack Navigation Compose. License \u00b6 Licensed under the Apache 2.0 license. See LICENSE for details.","title":"Overview"},{"location":"#material-motion-for-jetpack-compose","text":"Jetpack Compose library for implementing motion system in Material Components for Android.","title":"Material Motion for Jetpack Compose"},{"location":"#compose-versions","text":"Compose 1.0 (1.0.x) Compose 1.1 (1.1.x) Compose 1.2 (1.2.x) Compose 1.3 (1.3.x)","title":"Compose versions"},{"location":"#core","text":"A library which provides motion patterns support for Jetpack Compose.","title":"\ud83c\udf08 Core"},{"location":"#navigation","text":"A library which provides motion patterns support for Jetpack Navigation Compose.","title":"\ud83e\udded Navigation"},{"location":"#license","text":"Licensed under the Apache 2.0 license. See LICENSE for details.","title":"License"},{"location":"core/","text":"Material Motion Core \u00b6 Material Motion Core is a Jetpack Compose library for implementing motion system in Material Components for Android. Usage \u00b6 This library provides support for motion patterns defined in the Material spec. Shared axis \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialSharedAxisX( targetState = screen, forward = true, slideDistance = 30.dp // (optional) ) { newScreen -> // composable according to screen } // or val slideDistance = rememberSlideDistance(slideDistance = 30.dp) MaterialMotion( targetState = screen, motionSpec = { materialSharedAxisX(forward = forward, slideDistance = slideDistance) }, pop = forward.not() ) { newScreen -> // composable according to screen } Axis X Axis Y Axis Z Fade through \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = { materialFadeThrough() } ) { newScreen -> // composable according to screen } Fade Through Fade \u00b6 val (visible, onVisibleChanged) = remember { mutableStateOf(...) } MaterialFade( visible = visible ) { // composable to show } Fade Elevation scale \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { materialElevationScaleIn() with ... } // or motionSpec = { ... with materialElevationScaleOut() } ) { newScreen -> // composable according to screen } ElevationScale Hold \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { holdIn() with ... } // or motionSpec = { ... with holdOut() } ) { newScreen -> // composable according to screen } Hold CircularReveal \u00b6 var visible: Boolean by remember { mutableStateOf(false) } Box( modifier = Modifier.circularReveal( visible = visible, center = { fullSize -> Offset(x = 1f * fullSize.width, y = 0f * fullSize.height) // TopRight }, ) ) { ... } CircularReveal If you want to use different motions depending on the state: \u00b6 val (screen, onScreenChanged) = remember { mutableStateOf(...) } val slideDistance = rememberSlideDistance(slideDistance = 30.dp) MaterialMotion( targetState = screen, motionSpec = { when (targetState) { ... -> materialSharedAxisY(forward = true, slideDistance = slideDistance) ... -> materialFadeThroughIn() with materialFadeThroughOut() ... } }, pop = false // whether motion contents are rendered in reverse order. ) { newScreen -> // composable according to screen } Demo If you want to change motion durations: \u00b6 Just pass a duration(=ms) directly when creating material motion. For example: val motionSpec = materialFadeThrough(durationMillis = 300) Download \u00b6 repositories { mavenCentral() } dependencies { implementation \"io.github.fornewid:material-motion-compose-core:<version>\" }","title":"Guide"},{"location":"core/#material-motion-core","text":"Material Motion Core is a Jetpack Compose library for implementing motion system in Material Components for Android.","title":"Material Motion Core"},{"location":"core/#usage","text":"This library provides support for motion patterns defined in the Material spec.","title":"Usage"},{"location":"core/#shared-axis","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialSharedAxisX( targetState = screen, forward = true, slideDistance = 30.dp // (optional) ) { newScreen -> // composable according to screen } // or val slideDistance = rememberSlideDistance(slideDistance = 30.dp) MaterialMotion( targetState = screen, motionSpec = { materialSharedAxisX(forward = forward, slideDistance = slideDistance) }, pop = forward.not() ) { newScreen -> // composable according to screen } Axis X Axis Y Axis Z","title":"Shared axis"},{"location":"core/#fade-through","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = { materialFadeThrough() } ) { newScreen -> // composable according to screen } Fade Through","title":"Fade through"},{"location":"core/#fade","text":"val (visible, onVisibleChanged) = remember { mutableStateOf(...) } MaterialFade( visible = visible ) { // composable to show } Fade","title":"Fade"},{"location":"core/#elevation-scale","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { materialElevationScaleIn() with ... } // or motionSpec = { ... with materialElevationScaleOut() } ) { newScreen -> // composable according to screen } ElevationScale","title":"Elevation scale"},{"location":"core/#hold","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } MaterialMotion( targetState = screen, motionSpec = { holdIn() with ... } // or motionSpec = { ... with holdOut() } ) { newScreen -> // composable according to screen } Hold","title":"Hold"},{"location":"core/#circularreveal","text":"var visible: Boolean by remember { mutableStateOf(false) } Box( modifier = Modifier.circularReveal( visible = visible, center = { fullSize -> Offset(x = 1f * fullSize.width, y = 0f * fullSize.height) // TopRight }, ) ) { ... } CircularReveal","title":"CircularReveal"},{"location":"core/#if-you-want-to-use-different-motions-depending-on-the-state","text":"val (screen, onScreenChanged) = remember { mutableStateOf(...) } val slideDistance = rememberSlideDistance(slideDistance = 30.dp) MaterialMotion( targetState = screen, motionSpec = { when (targetState) { ... -> materialSharedAxisY(forward = true, slideDistance = slideDistance) ... -> materialFadeThroughIn() with materialFadeThroughOut() ... } }, pop = false // whether motion contents are rendered in reverse order. ) { newScreen -> // composable according to screen } Demo","title":"If you want to use different motions depending on the state:"},{"location":"core/#if-you-want-to-change-motion-durations","text":"Just pass a duration(=ms) directly when creating material motion. For example: val motionSpec = materialFadeThrough(durationMillis = 300)","title":"If you want to change motion durations:"},{"location":"core/#download","text":"repositories { mavenCentral() } dependencies { implementation \"io.github.fornewid:material-motion-compose-core:<version>\" }","title":"Download"},{"location":"migrating-from-0.5-to-0.6/","text":"Migrating from 0.5.x to 0.6.x \u00b6 In 0.6.0 , MaterialMotion has been completely rewritten based on AnimatedContent . So, if you were already using this library, you should migrate your codes. Please check the before and after in the following codes. Shared axis \u00b6 In 0.6.1 , both Axis and MaterialSharedAxis composable were deprecated. Use MaterialSharedAxis* composables or materialSharedAxis* motion specs for each axis instead. MaterialSharedAxis* composables: Axis Composable X MaterialSharedAxisX() Y MaterialSharedAxisY() Z MaterialSharedAxisZ() materialSharedAxis* motion specs: Axis MotionSpec EnterMotionSpec ExitMotionSpec X materialSharedAxisX() materialSharedAxisXIn() materialSharedAxisXOut() Y materialSharedAxisY() materialSharedAxisYIn() materialSharedAxisYOut() Z materialSharedAxisZ() materialSharedAxisZIn() materialSharedAxisZOut() You need to set the slide distance on the X/Y axis. If wants, you can set the slide distance as Dp value using rememberSlideDistance() . val motionSpec: MotionSpec = materialSharedAxisX( forward = true or false, slideDistance = rememberSlideDistance(30.dp) ) In 0.5.x : MaterialSharedAxis( targetState = screen, axis = Axis.X, forward = true, slideDistance = 30.dp // (optional) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialSharedAxisX( targetState = screen, forward = true, slideDistance = rememberSlideDistance(30.dp) ) { newScreen -> // composable according to screen } With MaterialMotion \u00b6 In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialSharedAxis( axis = Axis.X, forward = true, slideDistance = 30.dp // (optional) ) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialSharedAxisX( forward = true, slideDistance = rememberSlideDistance(30.dp) ) ) { newScreen -> // composable according to screen } Fade through \u00b6 Usage has not changed between 0.5.x and 0.6.x . MotionSpec EnterMotionSpec ExitMotionSpec materialFadeThrough() materialFadeThroughIn() materialFadeThroughOut() In 0.5.x : MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } In 0.6.x : MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } With MaterialMotion \u00b6 In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialFadeThrough() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialFadeThrough() ) { newScreen -> // composable according to screen } Fade \u00b6 Unlike 0.5.x , 0.6.x does NOT support MotionSpec . Use MaterialFade composable instead. In 0.5.x : MaterialFade( targetState = visible ) { visible -> if (visible) { // composable } } In 0.6.x : MaterialFade( visible = visible ) { // composable } Elevation scale \u00b6 MotionSpec EnterMotionSpec ExitMotionSpec - materialElevationScaleIn() materialElevationScaleOut() In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScale(growing = false) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScaleIn() with materialElevationScaleOut() ) { newScreen -> // composable according to screen } With other MaterialMotion \u00b6 In 0.5.x : MaterialMotion( targetState = screen, enterMotionSpec = materialElevationScale(growing = false) exitMotionSpec = ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, enterMotionSpec = ... exitMotionSpec = materialElevationScale(growing = true) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScaleIn() with ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = ... with materialElevationScaleOut() ) { newScreen -> // composable according to screen } Hold \u00b6 MotionSpec EnterMotionSpec ExitMotionSpec - holdIn() holdOut() In 0.5.x : MaterialMotion( targetState = screen, motionSpec = hold() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = holdIn() with holdOut() ) { newScreen -> // composable according to screen } With other MaterialMotion \u00b6 In 0.5.x : MaterialMotion( targetState = screen, enterMotionSpec = hold() exitMotionSpec = ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, enterMotionSpec = ... exitMotionSpec = hold() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = holdIn() with ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = ... with holdOut() ) { newScreen -> // composable according to screen }","title":"0.5 to 0.6"},{"location":"migrating-from-0.5-to-0.6/#migrating-from-05x-to-06x","text":"In 0.6.0 , MaterialMotion has been completely rewritten based on AnimatedContent . So, if you were already using this library, you should migrate your codes. Please check the before and after in the following codes.","title":"Migrating from 0.5.x to 0.6.x"},{"location":"migrating-from-0.5-to-0.6/#shared-axis","text":"In 0.6.1 , both Axis and MaterialSharedAxis composable were deprecated. Use MaterialSharedAxis* composables or materialSharedAxis* motion specs for each axis instead. MaterialSharedAxis* composables: Axis Composable X MaterialSharedAxisX() Y MaterialSharedAxisY() Z MaterialSharedAxisZ() materialSharedAxis* motion specs: Axis MotionSpec EnterMotionSpec ExitMotionSpec X materialSharedAxisX() materialSharedAxisXIn() materialSharedAxisXOut() Y materialSharedAxisY() materialSharedAxisYIn() materialSharedAxisYOut() Z materialSharedAxisZ() materialSharedAxisZIn() materialSharedAxisZOut() You need to set the slide distance on the X/Y axis. If wants, you can set the slide distance as Dp value using rememberSlideDistance() . val motionSpec: MotionSpec = materialSharedAxisX( forward = true or false, slideDistance = rememberSlideDistance(30.dp) ) In 0.5.x : MaterialSharedAxis( targetState = screen, axis = Axis.X, forward = true, slideDistance = 30.dp // (optional) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialSharedAxisX( targetState = screen, forward = true, slideDistance = rememberSlideDistance(30.dp) ) { newScreen -> // composable according to screen }","title":"Shared axis"},{"location":"migrating-from-0.5-to-0.6/#with-materialmotion","text":"In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialSharedAxis( axis = Axis.X, forward = true, slideDistance = 30.dp // (optional) ) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialSharedAxisX( forward = true, slideDistance = rememberSlideDistance(30.dp) ) ) { newScreen -> // composable according to screen }","title":"With MaterialMotion"},{"location":"migrating-from-0.5-to-0.6/#fade-through","text":"Usage has not changed between 0.5.x and 0.6.x . MotionSpec EnterMotionSpec ExitMotionSpec materialFadeThrough() materialFadeThroughIn() materialFadeThroughOut() In 0.5.x : MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen } In 0.6.x : MaterialFadeThrough( targetState = screen ) { newScreen -> // composable according to screen }","title":"Fade through"},{"location":"migrating-from-0.5-to-0.6/#with-materialmotion_1","text":"In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialFadeThrough() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialFadeThrough() ) { newScreen -> // composable according to screen }","title":"With MaterialMotion"},{"location":"migrating-from-0.5-to-0.6/#fade","text":"Unlike 0.5.x , 0.6.x does NOT support MotionSpec . Use MaterialFade composable instead. In 0.5.x : MaterialFade( targetState = visible ) { visible -> if (visible) { // composable } } In 0.6.x : MaterialFade( visible = visible ) { // composable }","title":"Fade"},{"location":"migrating-from-0.5-to-0.6/#elevation-scale","text":"MotionSpec EnterMotionSpec ExitMotionSpec - materialElevationScaleIn() materialElevationScaleOut() In 0.5.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScale(growing = false) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScaleIn() with materialElevationScaleOut() ) { newScreen -> // composable according to screen }","title":"Elevation scale"},{"location":"migrating-from-0.5-to-0.6/#with-other-materialmotion","text":"In 0.5.x : MaterialMotion( targetState = screen, enterMotionSpec = materialElevationScale(growing = false) exitMotionSpec = ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, enterMotionSpec = ... exitMotionSpec = materialElevationScale(growing = true) ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = materialElevationScaleIn() with ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = ... with materialElevationScaleOut() ) { newScreen -> // composable according to screen }","title":"With other MaterialMotion"},{"location":"migrating-from-0.5-to-0.6/#hold","text":"MotionSpec EnterMotionSpec ExitMotionSpec - holdIn() holdOut() In 0.5.x : MaterialMotion( targetState = screen, motionSpec = hold() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = holdIn() with holdOut() ) { newScreen -> // composable according to screen }","title":"Hold"},{"location":"migrating-from-0.5-to-0.6/#with-other-materialmotion_1","text":"In 0.5.x : MaterialMotion( targetState = screen, enterMotionSpec = hold() exitMotionSpec = ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, enterMotionSpec = ... exitMotionSpec = hold() ) { newScreen -> // composable according to screen } In 0.6.x : MaterialMotion( targetState = screen, motionSpec = holdIn() with ... ) { newScreen -> // composable according to screen } // or MaterialMotion( targetState = screen, motionSpec = ... with holdOut() ) { newScreen -> // composable according to screen }","title":"With other MaterialMotion"},{"location":"migrating-from-0.9-to-0.10/","text":"Migrating from 0.9.x to 0.10.x \u00b6 In 0.10.0 , MotionSpec is deprecated and use ContentTransform instead. So, if you were already using this library, you should migrate your codes. The deprecated APIs may be removed in the next release. Please check differences in the following codes. Migrating 'core' library \u00b6 If you are using 'core' library, migration is not difficult except for MaterialSharedAxisX/Y. MaterialMotion \u00b6 Migration steps: Renames motionSpec parameter to transitionSpec . Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . Change import from soup.compose.material.motion.with to androidx.compose.animation.with . - import soup.compose.material.motion.* + import soup.compose.material.motion.animation.* - import soup.compose.material.motion.with + import androidx.compose.animation.with MaterialMotion( - motionSpec = { ... with ... }, + transitionSpec = { ... with ... }, ) { ... } MaterialSharedAxisX \u00b6 Migration steps: Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . Add forward and slideDistance slots using rememberSlideDistance() . - import soup.compose.material.motion.materialSharedAxisX - import soup.compose.material.motion.materialSharedAxisXIn - import soup.compose.material.motion.materialSharedAxisXOut + import soup.compose.material.motion.animation.materialSharedAxisX + import soup.compose.material.motion.animation.materialSharedAxisXIn + import soup.compose.material.motion.animation.materialSharedAxisXOut - materialSharedAxisX() + val slideDistance = rememberSlideDistance() + materialSharedAxisX(forward = forward, slideDistance = slideDistance) - materialSharedAxisXIn() + val slideDistance = rememberSlideDistance() + materialSharedAxisXIn(forward = forward, slideDistance = slideDistance) - materialSharedAxisXOut() + val slideDistance = rememberSlideDistance() + materialSharedAxisXOut(forward = forward, slideDistance = slideDistance) MaterialSharedAxisY \u00b6 Migration steps: Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . Add forward and slideDistance slots using rememberSlideDistance() . - import soup.compose.material.motion.materialSharedAxisY - import soup.compose.material.motion.materialSharedAxisYIn - import soup.compose.material.motion.materialSharedAxisYOut + import soup.compose.material.motion.animation.materialSharedAxisY + import soup.compose.material.motion.animation.materialSharedAxisYIn + import soup.compose.material.motion.animation.materialSharedAxisYOut - materialSharedAxisY() + val slideDistance = rememberSlideDistance() + materialSharedAxisY(forward = forward, slideDistance = slideDistance) - materialSharedAxisYIn() + val slideDistance = rememberSlideDistance() + materialSharedAxisYIn(forward = forward, slideDistance = slideDistance) - materialSharedAxisYOut() + val slideDistance = rememberSlideDistance() + materialSharedAxisYOut(forward = forward, slideDistance = slideDistance) MaterialSharedAxisZ \u00b6 Migration steps: Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . Add forward slot. - import soup.compose.material.motion.materialSharedAxisZ - import soup.compose.material.motion.materialSharedAxisZIn - import soup.compose.material.motion.materialSharedAxisZOut + import soup.compose.material.motion.animation.materialSharedAxisZ + import soup.compose.material.motion.animation.materialSharedAxisZIn + import soup.compose.material.motion.animation.materialSharedAxisZOut - materialSharedAxisZ() + materialSharedAxisZ(forward = forward) - materialSharedAxisZIn() + materialSharedAxisZIn(forward = forward) - materialSharedAxisZOut() + materialSharedAxisZOut(forward = forward) MaterialFadeThrough \u00b6 Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . - import soup.compose.material.motion.materialFadeThrough - import soup.compose.material.motion.materialFadeThroughIn - import soup.compose.material.motion.materialFadeThroughOut + import soup.compose.material.motion.animation.materialFadeThrough + import soup.compose.material.motion.animation.materialFadeThroughIn + import soup.compose.material.motion.animation.materialFadeThroughOut MaterialElevationScale \u00b6 Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . - import soup.compose.material.motion.materialElevationScaleIn - import soup.compose.material.motion.materialElevationScaleOut + import soup.compose.material.motion.animation.materialElevationScaleIn + import soup.compose.material.motion.animation.materialElevationScaleOut Hold \u00b6 Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . - import soup.compose.material.motion.holdIn - import soup.compose.material.motion.holdOut + import soup.compose.material.motion.animation.holdIn + import soup.compose.material.motion.animation.holdOut Translate \u00b6 Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . - import soup.compose.material.motion.translateXIn - import soup.compose.material.motion.translateXOut - import soup.compose.material.motion.translateYIn - import soup.compose.material.motion.translateYOut + import soup.compose.material.motion.animation.translateXIn + import soup.compose.material.motion.animation.translateXOut + import soup.compose.material.motion.animation.translateYIn + import soup.compose.material.motion.animation.translateYOut Migrating 'navigation' library \u00b6 If you are using 'navigation' library, migration is simple. Migration steps: Rename all *MotionSpec parameters to *Transition . Change all material motion references from soup.compose.material.motion.* package to soup.compose.material.motion.animation.* package. For more information, see Migrating 'core' library section. With this changes, you can easily migrate to this library from accompanist-navigation-animation . MaterialMotionNavHost \u00b6 - import soup.compose.material.motion.* + import soup.compose.material.motion.animation.* MaterialMotionNavHost( ..., - enterMotionSpec = { ... }, - exitMotionSpec = { ... }, - popEnterMotionSpec = { ... }, - popExitMotionSpec = { ... } + enterTransition = { ... }, + exitTransition = { ... }, + popEnterTransition = { ... }, + popExitTransition = { ... } ) { ... } composable() \u00b6 - import soup.compose.material.motion.* + import soup.compose.material.motion.animation.* MaterialMotionNavHost(...) { composable( ..., - enterMotionSpec = { ... }, - exitMotionSpec = { ... }, - popEnterMotionSpec = { ... }, - popExitMotionSpec = { ... } + enterTransition = { ... }, + exitTransition = { ... }, + popEnterTransition = { ... }, + popExitTransition = { ... } ) { ... } } navigation() \u00b6 - import soup.compose.material.motion.* + import soup.compose.material.motion.animation.* MaterialMotionNavHost(...) { navigation( ..., - enterMotionSpec = { ... }, - exitMotionSpec = { ... }, - popEnterMotionSpec = { ... }, - popExitMotionSpec = { ... } + enterTransition = { ... }, + exitTransition = { ... }, + popEnterTransition = { ... }, + popExitTransition = { ... } ) { composable(...) { ... } } } If you are using default motionSpecs \u00b6 In 0.10.0 , default transitions are changed. Enter Transition Before: materialSharedAxisZIn() After: fadeIn(animationSpec = tween(DefaultMotionDuration)) Exit Transition: Before: materialSharedAxisZOut() After: fadeOut(animationSpec = tween(DefaultMotionDuration)) So if you want to keep the previous transitions, you need to define *Transition parameters. Please add *Transition parameters like the following codes: MaterialMotionNavHost( ..., + enterTransition = { materialSharedAxisZIn(forward = true) }, + exitTransition = { materialSharedAxisZOut(forward = true) }, + popEnterTransition = { materialSharedAxisZIn(forward = false) }, + popExitTransition = { materialSharedAxisZOut(forward = false) }, ) { ... }","title":"0.9 to 0.10"},{"location":"migrating-from-0.9-to-0.10/#migrating-from-09x-to-010x","text":"In 0.10.0 , MotionSpec is deprecated and use ContentTransform instead. So, if you were already using this library, you should migrate your codes. The deprecated APIs may be removed in the next release. Please check differences in the following codes.","title":"Migrating from 0.9.x to 0.10.x"},{"location":"migrating-from-0.9-to-0.10/#migrating-core-library","text":"If you are using 'core' library, migration is not difficult except for MaterialSharedAxisX/Y.","title":"Migrating 'core' library"},{"location":"migrating-from-0.9-to-0.10/#materialmotion","text":"Migration steps: Renames motionSpec parameter to transitionSpec . Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . Change import from soup.compose.material.motion.with to androidx.compose.animation.with . - import soup.compose.material.motion.* + import soup.compose.material.motion.animation.* - import soup.compose.material.motion.with + import androidx.compose.animation.with MaterialMotion( - motionSpec = { ... with ... }, + transitionSpec = { ... with ... }, ) { ... }","title":"MaterialMotion"},{"location":"migrating-from-0.9-to-0.10/#materialsharedaxisx","text":"Migration steps: Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . Add forward and slideDistance slots using rememberSlideDistance() . - import soup.compose.material.motion.materialSharedAxisX - import soup.compose.material.motion.materialSharedAxisXIn - import soup.compose.material.motion.materialSharedAxisXOut + import soup.compose.material.motion.animation.materialSharedAxisX + import soup.compose.material.motion.animation.materialSharedAxisXIn + import soup.compose.material.motion.animation.materialSharedAxisXOut - materialSharedAxisX() + val slideDistance = rememberSlideDistance() + materialSharedAxisX(forward = forward, slideDistance = slideDistance) - materialSharedAxisXIn() + val slideDistance = rememberSlideDistance() + materialSharedAxisXIn(forward = forward, slideDistance = slideDistance) - materialSharedAxisXOut() + val slideDistance = rememberSlideDistance() + materialSharedAxisXOut(forward = forward, slideDistance = slideDistance)","title":"MaterialSharedAxisX"},{"location":"migrating-from-0.9-to-0.10/#materialsharedaxisy","text":"Migration steps: Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . Add forward and slideDistance slots using rememberSlideDistance() . - import soup.compose.material.motion.materialSharedAxisY - import soup.compose.material.motion.materialSharedAxisYIn - import soup.compose.material.motion.materialSharedAxisYOut + import soup.compose.material.motion.animation.materialSharedAxisY + import soup.compose.material.motion.animation.materialSharedAxisYIn + import soup.compose.material.motion.animation.materialSharedAxisYOut - materialSharedAxisY() + val slideDistance = rememberSlideDistance() + materialSharedAxisY(forward = forward, slideDistance = slideDistance) - materialSharedAxisYIn() + val slideDistance = rememberSlideDistance() + materialSharedAxisYIn(forward = forward, slideDistance = slideDistance) - materialSharedAxisYOut() + val slideDistance = rememberSlideDistance() + materialSharedAxisYOut(forward = forward, slideDistance = slideDistance)","title":"MaterialSharedAxisY"},{"location":"migrating-from-0.9-to-0.10/#materialsharedaxisz","text":"Migration steps: Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . Add forward slot. - import soup.compose.material.motion.materialSharedAxisZ - import soup.compose.material.motion.materialSharedAxisZIn - import soup.compose.material.motion.materialSharedAxisZOut + import soup.compose.material.motion.animation.materialSharedAxisZ + import soup.compose.material.motion.animation.materialSharedAxisZIn + import soup.compose.material.motion.animation.materialSharedAxisZOut - materialSharedAxisZ() + materialSharedAxisZ(forward = forward) - materialSharedAxisZIn() + materialSharedAxisZIn(forward = forward) - materialSharedAxisZOut() + materialSharedAxisZOut(forward = forward)","title":"MaterialSharedAxisZ"},{"location":"migrating-from-0.9-to-0.10/#materialfadethrough","text":"Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . - import soup.compose.material.motion.materialFadeThrough - import soup.compose.material.motion.materialFadeThroughIn - import soup.compose.material.motion.materialFadeThroughOut + import soup.compose.material.motion.animation.materialFadeThrough + import soup.compose.material.motion.animation.materialFadeThroughIn + import soup.compose.material.motion.animation.materialFadeThroughOut","title":"MaterialFadeThrough"},{"location":"migrating-from-0.9-to-0.10/#materialelevationscale","text":"Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . - import soup.compose.material.motion.materialElevationScaleIn - import soup.compose.material.motion.materialElevationScaleOut + import soup.compose.material.motion.animation.materialElevationScaleIn + import soup.compose.material.motion.animation.materialElevationScaleOut","title":"MaterialElevationScale"},{"location":"migrating-from-0.9-to-0.10/#hold","text":"Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . - import soup.compose.material.motion.holdIn - import soup.compose.material.motion.holdOut + import soup.compose.material.motion.animation.holdIn + import soup.compose.material.motion.animation.holdOut","title":"Hold"},{"location":"migrating-from-0.9-to-0.10/#translate","text":"Change packages from soup.compose.material.motion.* to soup.compose.material.motion.animation.* . - import soup.compose.material.motion.translateXIn - import soup.compose.material.motion.translateXOut - import soup.compose.material.motion.translateYIn - import soup.compose.material.motion.translateYOut + import soup.compose.material.motion.animation.translateXIn + import soup.compose.material.motion.animation.translateXOut + import soup.compose.material.motion.animation.translateYIn + import soup.compose.material.motion.animation.translateYOut","title":"Translate"},{"location":"migrating-from-0.9-to-0.10/#migrating-navigation-library","text":"If you are using 'navigation' library, migration is simple. Migration steps: Rename all *MotionSpec parameters to *Transition . Change all material motion references from soup.compose.material.motion.* package to soup.compose.material.motion.animation.* package. For more information, see Migrating 'core' library section. With this changes, you can easily migrate to this library from accompanist-navigation-animation .","title":"Migrating 'navigation' library"},{"location":"migrating-from-0.9-to-0.10/#materialmotionnavhost","text":"- import soup.compose.material.motion.* + import soup.compose.material.motion.animation.* MaterialMotionNavHost( ..., - enterMotionSpec = { ... }, - exitMotionSpec = { ... }, - popEnterMotionSpec = { ... }, - popExitMotionSpec = { ... } + enterTransition = { ... }, + exitTransition = { ... }, + popEnterTransition = { ... }, + popExitTransition = { ... } ) { ... }","title":"MaterialMotionNavHost"},{"location":"migrating-from-0.9-to-0.10/#composable","text":"- import soup.compose.material.motion.* + import soup.compose.material.motion.animation.* MaterialMotionNavHost(...) { composable( ..., - enterMotionSpec = { ... }, - exitMotionSpec = { ... }, - popEnterMotionSpec = { ... }, - popExitMotionSpec = { ... } + enterTransition = { ... }, + exitTransition = { ... }, + popEnterTransition = { ... }, + popExitTransition = { ... } ) { ... } }","title":"composable()"},{"location":"migrating-from-0.9-to-0.10/#navigation","text":"- import soup.compose.material.motion.* + import soup.compose.material.motion.animation.* MaterialMotionNavHost(...) { navigation( ..., - enterMotionSpec = { ... }, - exitMotionSpec = { ... }, - popEnterMotionSpec = { ... }, - popExitMotionSpec = { ... } + enterTransition = { ... }, + exitTransition = { ... }, + popEnterTransition = { ... }, + popExitTransition = { ... } ) { composable(...) { ... } } }","title":"navigation()"},{"location":"migrating-from-0.9-to-0.10/#if-you-are-using-default-motionspecs","text":"In 0.10.0 , default transitions are changed. Enter Transition Before: materialSharedAxisZIn() After: fadeIn(animationSpec = tween(DefaultMotionDuration)) Exit Transition: Before: materialSharedAxisZOut() After: fadeOut(animationSpec = tween(DefaultMotionDuration)) So if you want to keep the previous transitions, you need to define *Transition parameters. Please add *Transition parameters like the following codes: MaterialMotionNavHost( ..., + enterTransition = { materialSharedAxisZIn(forward = true) }, + exitTransition = { materialSharedAxisZOut(forward = true) }, + popEnterTransition = { materialSharedAxisZIn(forward = false) }, + popExitTransition = { materialSharedAxisZOut(forward = false) }, ) { ... }","title":"If you are using default motionSpecs"},{"location":"navigation/","text":"Material Motion Navigation \u00b6 Usage \u00b6 val navController = rememberMaterialMotionNavController () MaterialMotionNavHost ( navController , startDestination = \"first\" ) { composable ( \"first\" , enterMotionSpec = { holdIn () }, exitMotionSpec = { holdOut () }, ) { // first composable } composable ( \"second\" , enterMotionSpec = { materialSharedAxisXIn () }, exitMotionSpec = { materialSharedAxisXOut () }, ) { // second composable } } Migration \u00b6 From 'accompanist-navigation-animation' library \u00b6 The migration is simple. Please check differences in the following codes. - import com.google.accompanist.navigation.animation.AnimatedNavHost - import com.google.accompanist.navigation.animation.composable - import com.google.accompanist.navigation.animation.navigation - import com.google.accompanist.navigation.animation.rememberAnimatedNavController + import soup.compose.material.motion.navigation.MaterialMotionNavHost + import soup.compose.material.motion.navigation.composable + import soup.compose.material.motion.navigation.navigation + import soup.compose.material.motion.navigation.rememberMaterialMotionNavController - val navController = rememberAnimatedNavController() + val navController = rememberMaterialMotionNavController() - AnimatedNavHost( + MaterialMotionNavHost( ..., ) { composable(...) { ... } navigation(...) { composable(...) { ... } } } Download \u00b6 repositories { mavenCentral() } dependencies { implementation \"io.github.fornewid:material-motion-compose-navigation:<version>\" // If you want to change motion, use with core library. implementation \"io.github.fornewid:material-motion-compose-core:<version>\" }","title":"Guide"},{"location":"navigation/#material-motion-navigation","text":"","title":"Material Motion Navigation"},{"location":"navigation/#usage","text":"val navController = rememberMaterialMotionNavController () MaterialMotionNavHost ( navController , startDestination = \"first\" ) { composable ( \"first\" , enterMotionSpec = { holdIn () }, exitMotionSpec = { holdOut () }, ) { // first composable } composable ( \"second\" , enterMotionSpec = { materialSharedAxisXIn () }, exitMotionSpec = { materialSharedAxisXOut () }, ) { // second composable } }","title":"Usage"},{"location":"navigation/#migration","text":"","title":"Migration"},{"location":"navigation/#from-accompanist-navigation-animation-library","text":"The migration is simple. Please check differences in the following codes. - import com.google.accompanist.navigation.animation.AnimatedNavHost - import com.google.accompanist.navigation.animation.composable - import com.google.accompanist.navigation.animation.navigation - import com.google.accompanist.navigation.animation.rememberAnimatedNavController + import soup.compose.material.motion.navigation.MaterialMotionNavHost + import soup.compose.material.motion.navigation.composable + import soup.compose.material.motion.navigation.navigation + import soup.compose.material.motion.navigation.rememberMaterialMotionNavController - val navController = rememberAnimatedNavController() + val navController = rememberMaterialMotionNavController() - AnimatedNavHost( + MaterialMotionNavHost( ..., ) { composable(...) { ... } navigation(...) { composable(...) { ... } } }","title":"From 'accompanist-navigation-animation' library"},{"location":"navigation/#download","text":"repositories { mavenCentral() } dependencies { implementation \"io.github.fornewid:material-motion-compose-navigation:<version>\" // If you want to change motion, use with core library. implementation \"io.github.fornewid:material-motion-compose-core:<version>\" }","title":"Download"}]}